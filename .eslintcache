[{"/home/frol/Рабочий стол/FirstReactApp/first-app/src/index.js":"1","/home/frol/Рабочий стол/FirstReactApp/first-app/src/App.js":"2","/home/frol/Рабочий стол/FirstReactApp/first-app/src/service/firebase/firebase.js":"3","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Menunavbar/MenuNavbar.js":"4","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Home/index.js":"5","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Footer/footer.js":"6","/home/frol/Рабочий стол/FirstReactApp/first-app/src/service/firebase/firebaseContext.js":"7","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/index.js":"8","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Menunavbar/Menu/Menu.js":"9","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Menunavbar/Navbar/Navbar.js":"10","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/PokemonCardHome/PokemonCardHome.js":"11","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Layout/layout.js":"12","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Header/header.js":"13","/home/frol/Рабочий стол/FirstReactApp/first-app/src/context/pokemonContext.js":"14","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/start/Start.js":"15","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/finish/Finish.js":"16","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/board/Board.js":"17","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/PokemonCard/PokemonCard.js":"18","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/board/component/PlayerBoard/PlayerBoard.js":"19","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/finish/PlayerFinish/PlayerFinish.js":"20"},{"size":280,"mtime":1612795058000,"results":"21","hashOfConfig":"22"},{"size":1967,"mtime":1613049101160,"results":"23","hashOfConfig":"22"},{"size":1219,"mtime":1613049192298,"results":"24","hashOfConfig":"22"},{"size":502,"mtime":1612795058000,"results":"25","hashOfConfig":"22"},{"size":2052,"mtime":1613048599477,"results":"26","hashOfConfig":"22"},{"size":351,"mtime":1612795058000,"results":"27","hashOfConfig":"22"},{"size":85,"mtime":1613048599513,"results":"28","hashOfConfig":"22"},{"size":1897,"mtime":1613235068713,"results":"29","hashOfConfig":"22"},{"size":852,"mtime":1613049147323,"results":"30","hashOfConfig":"22"},{"size":462,"mtime":1612795058000,"results":"31","hashOfConfig":"22"},{"size":1920,"mtime":1613050355334,"results":"32","hashOfConfig":"22"},{"size":984,"mtime":1612795058000,"results":"33","hashOfConfig":"22"},{"size":744,"mtime":1613048599465,"results":"34","hashOfConfig":"22"},{"size":144,"mtime":1613220354647,"results":"35","hashOfConfig":"22"},{"size":2822,"mtime":1613048599513,"results":"36","hashOfConfig":"22"},{"size":1354,"mtime":1613235791511,"results":"37","hashOfConfig":"22"},{"size":4724,"mtime":1613224708238,"results":"38","hashOfConfig":"22"},{"size":1902,"mtime":1613228804222,"results":"39","hashOfConfig":"22"},{"size":1349,"mtime":1613160817572,"results":"40","hashOfConfig":"22"},{"size":1616,"mtime":1613235125424,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"19rgu5f",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},"/home/frol/Рабочий стол/FirstReactApp/first-app/src/index.js",[],["86","87"],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/App.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/service/firebase/firebase.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Menunavbar/MenuNavbar.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Home/index.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Footer/footer.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/service/firebase/firebaseContext.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/index.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Menunavbar/Menu/Menu.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Menunavbar/Navbar/Navbar.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/PokemonCardHome/PokemonCardHome.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Layout/layout.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/Header/header.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/context/pokemonContext.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/start/Start.js",["88"],"import { useState, useEffect, useContext } from 'react';\nimport {useHistory} from 'react-router-dom';\nimport PokemonCard from '../../../../components/PokemonCard/PokemonCard';\nimport Layout from '../../../../components/Layout/layout'\n\nimport { FireBaseContext } from '../../../../service/firebase/firebaseContext';\nimport { PokemonContext } from '../../../../context/pokemonContext';\nimport cn from 'classnames';\nimport s from './style.module.css';\n\n\n\nconst Start = () => {\n\n    const pokemonContext = useContext(PokemonContext)\n    const firebase = useContext(FireBaseContext);\n    const history = useHistory();\n\n\n    const [pokemons, setPokemons] = useState({});\n\n    useEffect(() => {\n        firebase.getPokemonSoket((pokemons) => {\n            setPokemons(pokemons);\n        });\n        pokemonContext.dischargeContext();\n\n        return (() => firebase.offPokemonSoket());\n    }, []);\n\n    const onCardClick = (key) => {\n        \n        const pokemon = {...pokemons[key]}\n        pokemonContext.selectPokemon(key, pokemon)\n\n        \n        setPokemons(prevState => ({\n            ...prevState,\n            [key]: {\n                ...prevState[key],\n                selected: !prevState[key].selected,\n            }\n        }))\n\n    };\n\n    const hendleStart = () => {\n      history.push('/game/board');\n    }\n\n    return (\n        <>\n            <Layout id='03' title={'Welcome'} colorBg='black'>\n                <div className={s.flex}>\n                    <button className={cn(s.buttonContainern, s.container)} \n                    disabled={Object.keys(pokemonContext.pokemons).length < 5}\n                    onClick={hendleStart}>\n                            Let's play!\n                    </button>\n                </div>\n                <div className={s.flex}>\n                    {\n                        Object.entries(pokemons).map(([key, { type, img, name, id, values, selected}]) => <PokemonCard\n                            key={key}\n                            type={type}\n                            img={img}\n                            name={name}\n                            id={id}\n                            values={values}\n                            onCardClick={() => {\n                                if (Object.keys(pokemonContext.pokemons).length < 5 || selected) {\n                                    onCardClick(key)\n                                }\n                                \n                            }}\n                            isActive={true}\n                            unicId={key}\n                            minimize={false}\n                            className={s.card}\n                            isSelected={selected}\n                        />)\n                    }\n                </div>\n            </Layout>\n        </>\n    );\n};\n\nexport default Start;","/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/finish/Finish.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/board/Board.js",["89","90","91"],"import { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\n\nimport { PokemonContext, Player2Context } from '../../../../context/pokemonContext';\nimport PokemonCard from '../../../../components/PokemonCard/PokemonCard';\nimport PlayerBoard from './component/PlayerBoard/PlayerBoard.js';\n\nimport s from './style.module.css';\n\nconst counterWin = (board, player1, player2) => {\n\n    let player1Count = player1.length;\n    let player2Count = player2.length;\n\n    board.forEach(item => {\n        if(item.card.possession === 'blue') {\n            player1Count ++;\n        }\n        if(item.card.possession === 'red') {\n            player2Count ++;\n        }\n    });\n\n    return [player1Count, player2Count];\n}\n\nconst BoardPage = () => {\n\n    \n    const { pokemons } = useContext(PokemonContext);\n    const pokemonsPlyaer2 = useContext(Player2Context);\n\n    const [board, setBoard] = useState([]);\n    const [player1, setPlayer1] = useState(() => {\n        return Object.values(pokemons).map((item) => ({\n            ...item,\n            possession: 'blue',\n        }));\n    });\n    const [player2, setPlayer2] = useState([]);\n    const [choiceCard, setChoiceCard] = useState(null)\n    const [steps, setSteps] = useState(0);\n    \n    \n\n    const history = useHistory();\n   \n    useEffect(async () => {\n        const boardResponse = await fetch('https://reactmarathon-api.netlify.app/api/board');\n        const boardRequest = await boardResponse.json();\n\n        setBoard(boardRequest.data);\n\n        const boardPlayr2Response = await fetch('https://reactmarathon-api.netlify.app/api/create-player');\n        const boardPlayer2Request = await boardPlayr2Response.json();\n\n        \n        setPlayer2(boardPlayer2Request.data.map((item) => ({\n            ...item,\n            possession: 'red',\n        })))\n        pokemonsPlyaer2.setPokemonsPlayer2(boardPlayer2Request.data)\n       \n    }, []);\n\n\n\n    const handleClickOnBoard = async (position) => {\n    \n        if (choiceCard) {\n            const params = {\n                position,\n                card: choiceCard,\n                board,\n            }\n\n            const res = await fetch('https://reactmarathon-api.netlify.app/api/players-turn', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(params),\n            });\n\n            const request = await res.json();\n\n            if(choiceCard.possession === 'blue') {\n                setPlayer1(prevState => prevState.filter(item => item.id !== choiceCard.id));\n            }\n\n            if(choiceCard.possession === 'red') {\n                setPlayer2(prevState => prevState.filter(item => item.id !== choiceCard.id));\n            }\n\n            setBoard(request.data);\n\n            setSteps(prevState => prevState + 1);\n        }\n    }\n\n    useEffect(() => {\n        if (steps === 9) {\n            const [count1, count2] = counterWin(board, player1, player2);\n\n            if( count1 > count2) {\n                alert('WIN!')\n            }else if(count1 < count2) {\n                alert('LOSE!')\n            }else{\n                alert('DRAW!')\n            }\n            history.replace('./finish');\n            \n        }\n    }, [steps])\n\n    if(Object.keys(pokemons).length === 0) {\n        history.replace('/game');\n    }\n\n    return (\n        <div className={s.root}>\n            <div className={s.playerOne}>\n                {\n                    <PlayerBoard cards={player1}\n                        onClickCard={(card) => setChoiceCard(card)}\n                        playerSelected={'player1'}\n                        player={player1}\n                    />\n                }\n            </div>\n            <div className={s.board}>\n                {\n                    board.map((item) => (\n                        <div\n                            key={item.position}\n                            className={s.boardPlate}\n                            onClick={() => !item.card && handleClickOnBoard(item.position)}>\n                            {\n                                item.card && <PokemonCard {...item.card} isActive minimize />\n                            }\n                        </div>\n                    ))\n\n                }\n            </div>\n\n            <div className={s.playerTwo}>\n                {\n                    <PlayerBoard cards={player2}\n                        onClickCard={(card) => setChoiceCard(card)}\n                        playerSelected={'player2'}\n                        player={player2}\n                    />\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default BoardPage; ","/home/frol/Рабочий стол/FirstReactApp/first-app/src/components/PokemonCard/PokemonCard.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/board/component/PlayerBoard/PlayerBoard.js",[],"/home/frol/Рабочий стол/FirstReactApp/first-app/src/routes/Game/routes/finish/PlayerFinish/PlayerFinish.js",["92"],"import { useContext } from 'react';\n\nimport PokemonCard from '../../../../../components/PokemonCard/PokemonCard';\nimport { Player2Context } from '../../../../../context/pokemonContext';\nimport { FireBaseContext } from '../../../../../service/firebase/firebaseContext';\nimport s from './playerFinish.module.css';\n\n\nconst PlayerFinish = ({ cards, player }) => {\n\n    const firebase = useContext(FireBaseContext);\n    const { pokemons2, dischargeContext2} = useContext(Player2Context);\n\n    const handleSelectedNewCard = (id) => {\n        pokemons2.map((item) => {\n\n            if (item.id === id) {\n                firebase.addPokemon(item);\n            };\n\n            return;\n        })\n        dischargeContext2();\n    };\n\n    return (\n        <>\n            {\n                cards.map((item) => (\n                    <div className={s.cardBoard}\n                    >\n\n                        <PokemonCard\n                            key={item.id}\n                            type={item.type}\n                            img={item.img}\n                            name={item.name}\n                            id={item.id}\n                            values={item.values}\n                            isActive\n                            minimize\n                            onCardClick={handleSelectedNewCard}\n                            possession={player.possession}\n                            unicId={item.id}\n                            className={s.card}\n                            \n                        />\n                    </div>)\n                )}\n        </>\n    )\n\n}\n\nexport default PlayerFinish;",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":29,"column":8,"nodeType":"99","endLine":29,"endColumn":10,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":49,"column":15,"nodeType":"102","endLine":65,"endColumn":6},{"ruleId":"97","severity":1,"message":"103","line":65,"column":8,"nodeType":"99","endLine":65,"endColumn":10,"suggestions":"104"},{"ruleId":"97","severity":1,"message":"105","line":116,"column":8,"nodeType":"99","endLine":116,"endColumn":15,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":21,"column":13,"nodeType":"109","messageId":"110","endLine":21,"endColumn":20},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'firebase' and 'pokemonContext'. Either include them or remove the dependency array.","ArrayExpression",["113"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'pokemonsPlyaer2'. Either include it or remove the dependency array.",["114"],"React Hook useEffect has missing dependencies: 'board', 'history', 'player1', and 'player2'. Either include them or remove the dependency array.",["115"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [firebase, pokemonContext]",{"range":"122","text":"123"},"Update the dependencies array to be: [pokemonsPlyaer2]",{"range":"124","text":"125"},"Update the dependencies array to be: [board, history, player1, player2, steps]",{"range":"126","text":"127"},[886,888],"[firebase, pokemonContext]",[1927,1929],"[pokemonsPlyaer2]",[3304,3311],"[board, history, player1, player2, steps]"]